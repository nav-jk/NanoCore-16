/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module Fetch (
  input clock,
  input [15:0] value,
  input jump,
  input prog,
  input [31:0] bypass,
  input [31:0] instruction,
  input Flag_zero,
  input [3:0] beq_address,
  output [3:0] PC,
  output [31:0] instr_o
);
  wire [3:0] s0;
  wire s1;
  wire [3:0] s2;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( prog ),
    .in_0( instruction ),
    .in_1( bypass ),
    .out( instr_o )
  );
  assign s1 = (jump | Flag_zero);
  assign s2 = value[3:0];
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( Flag_zero ),
    .in_0( s2 ),
    .in_1( beq_address ),
    .out( s0 )
  );
  // PC
  DIG_CounterPreset #(
    .Bits(4),
    .maxValue(0)
  )
  DIG_CounterPreset_i2 (
    .en( 1'b1 ),
    .C( clock ),
    .dir( 1'b0 ),
    .in( s0 ),
    .ld( s1 ),
    .clr( 1'b0 ),
    .out( PC )
  );
endmodule
